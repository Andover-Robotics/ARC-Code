#pragma config(Hubs,  S1, HTMotor,  HTMotor,  none,     none)
#pragma config(Hubs,  S2, HTMotor,  HTServo,  none,     none)
#pragma config(Sensor, S3,     ColorSensor,    sensorI2CHiTechnicColor)
#pragma config(Sensor, S4,     IRSeeker,       sensorHiTechnicIRSeeker1200)
#pragma config(Motor,  mtr_S1_C1_1,     Left,          tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     Right,         tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C2_1,     Left2,         tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C2_2,     Right2,        tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S2_C1_1,     LinearSlide,   tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C1_2,     ArmMotor,      tmotorTetrix, openLoop, encoder)
#pragma config(Servo,  srvo_S2_C2_1,    ArmExtend,            tServoContinuousRotation)
#pragma config(Servo,  srvo_S2_C2_2,    ArmJoint,             tServoStandard)
#pragma config(Servo,  srvo_S2_C2_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S2_C2_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "JoystickDriver.c"

int wheelCircumference = 0;
int rampLength = 0;
int linSlideGearCircumference = 4*PI;
int linSlideHeight = 28;
int linSlideTicks = (1440 * linSlideGearCircumference)/linSlideHeight;
int armTicks;
int armJointTipped;
int armJointUp;

#include "JoystickDriver.c"

void clear(){
	nMotorEncoder[Left] = 0;
	nMotorEncoder[Right] = 0;
	nMotorEncoder[LinearSlide] = 0;
	nMotorEncoder[ArmMotor] = 0;
}
task tipArm(){
	servo[ArmJoint] = armJointTipped;
}
task resetArm(){
	servo[ArmJoint] = armJointUp;	
}
void driveStraight(int in){
	while(nMotorEncoder[Left] < (in*(wheelCircumference/1440))){
		motor[Left]= 80;
		motor[Right] = 80;
	}
}
task raiseLinearSlide(){
	while(nMotorEncoder[LinearSlide] < linSlideTicks){
			motor[LinearSlide] = 80;
	}
}
task lowerLinearSlide(){
	while(nMotorEncoder[LinearSlide] > -linSlideTicks){
			motor[LinearSlide] = -80;
		}
}
task raiseArm(){
	while(nMotorEncoder[ArmMotor] < armTicks){
		motor[ArmMotor] = 70;
	}
}
task lowerArm(){
	while(nMotorEncoder[ArmMotor] > -armTicks){
		motor[ArmMotor] = -70;
	}
}
task extendArm(){
	
}
task retractArm(){
	
}
task syncMotors(){
	motor[Left2] = motor[Left];
	motor[Right2] = motor[Right];
}
void initiallize(){
	StartTask(retractArm);
	StartTask(resetArm);
}
task main(){
	StartTask(syncMotors);
	initiallize();
	
 	waitForStart();
	
}

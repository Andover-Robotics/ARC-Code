#pragma config(Hubs,  S1, HTMotor,  HTServo,  HTMotor,  none)
#pragma config(Sensor, S2,     Sonar,          sensorSONAR)
#pragma config(Sensor, S3,     IRSensor,       sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S4,     Gyro,           sensorI2CHiTechnicGyro)
#pragma config(Motor,  mtr_S1_C1_1,     L,             tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     R,             tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C3_1,     LinearSlide,   tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C3_2,     ArmMotor,      tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Servo,  srvo_S1_C2_1,    Hook,                 tServoStandard)
#pragma config(Servo,  srvo_S1_C2_2,    ArmJoint,             tServoStandard)
#pragma config(Servo,  srvo_S1_C2_3,    SonarServo,           tServoStandard)
#pragma config(Servo,  srvo_S1_C2_4,    autoArm,              tServoStandard)
#pragma config(Servo,  srvo_S1_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
FTC 2014-15
Cascade Effect
Team 4410 ARC Lightning
Autonomous Code
Christopher Zhao
version 1.0.2, 2/16/2015
*/

#include "JoystickDriver.c"
#include "hitechnic-gyro.h"
#include "hitechnic-eopd.h"
#include "lego-ultrasound.h"
#include "ArmFunctions.c"
#include "DriveFunctions.c"

//buttons
int buttonRight = 1;
int buttonLeft = 2;
int buttonEnter = 3;

void stopMotors(){
	motor[L] = 0;
	motor[R] = 0;
	motor[LinearSlide] = 0;
	motor[ArmMotor] = 0;
}
void clear(){
	nMotorEncoder[L] = 0;
	nMotorEncoder[R] = 0;
	nMotorEncoder[ArmMotor] = 0;
	nMotorEncoder[LinearSlide] = 0;
}
void initiallize(){
	servoChangeRate[ArmJoint] = 2;
	servoChangeRate[Hook] = 15;
	servo[ArmJoint] = 240;
	servo[Hook] = 0;
	servo[autoArm] = 254;
	clear();
	waitForStart();
}
task main()
{
	//begin GUI
	bool taskBool[5];                                   				//Determines whether or not a certain task gets enacted
	taskBool[4] = false;
	string taskList[4] =
	{"Starting Area", "Goal Type", "Kickstand", "Drag"};     	//List of different tasks
	string taskOption[4][2];
	taskOption[0][0] = "Ramp";
	taskOption[0][1] = "Parking Zone";
	taskOption[1][0] = "Rolling";
	taskOption[1][1] = "Center";
	taskOption[2][0] = "Yes";
	taskOption[2][1] = "No";
	taskOption[3][0] = "Yes";
	taskOption[3][1] = "No";
	short taskNumber = 0;
	short taskOptionNumber = 0;
	while(taskNumber < 3){
		nxtDisplayCenteredTextLine(3, "%s",
		taskList[taskNumber]);
		nxtDisplayCenteredTextLine(5, "%s",
		taskOption[taskNumber][taskOptionNumber]);
		if(nNxtButtonPressed == buttonRight){
			taskOptionNumber = 1;
		}
		if(nNxtButtonPressed == buttonLeft){
			taskOptionNumber = 0;
		}
		if(nNxtButtonPressed == buttonEnter &&
			taskOptionNumber == 0){
			taskBool[taskNumber] = true;
			taskNumber++;
			wait10Msec(100);
		}
		if(nNxtButtonPressed == buttonEnter &&
			taskOptionNumber == 1){
			taskBool[taskNumber] = false;
			taskNumber++;
			wait10Msec(100);
		}
		if(nNxtButtonPressed == -1){}
	}
	if(taskBool[2] == true || taskBool[1] == false){
		taskBool[3] = false;
		taskBool[4] = true;
	}
	while(taskBool[4] == false){
		nxtDisplayCenteredTextLine(3, "%s", taskList[3]);
		nxtDisplayCenteredTextLine(5, "%s", taskOption[3][taskOptionNumber]);
		if(nNxtButtonPressed == buttonRight){
			taskOptionNumber = 1;
		}
		if(nNxtButtonPressed == buttonLeft){
			taskOptionNumber = 0;
		}
		if(nNxtButtonPressed == buttonEnter &&
			taskOptionNumber == 0){
			taskBool[3] = true;
			wait10Msec(100);
			taskBool[4] = true;
		}
		if(nNxtButtonPressed == buttonEnter &&
			taskOptionNumber == 1){
			taskBool[3] = false;
			wait10Msec(100);
			taskBool[4] = true;
		}
		if(nNxtButtonPressed == -1){}
	}
	if(taskBool[4] == true){}
	//ready, begin autonomous procedure
	bool startArea = taskBool[0];
	bool goal = taskBool[1];
	bool kickstand = taskBool[2];
	bool drag = taskBool[3];
	initiallize();
	StartTask(armStop);
	StartTask(killSlide);
	if(goal == true){
		StartTask(armProcessLow);
	}
	else{}
	if(startArea == true){
		driveStraight(72);
		if(goal == true){
			StartTask(raiseLinearSlide);
			SonarDrive(10);
			servo[ArmJoint] = 0;
			StartTask(lowerLinearSlide);
			moveArm(-90);
			while(nMotorEncoder[L] > -sonarTicks){
				motor[L] = -80;
				motor[R] = -80;
			}
			motor[L] = 0;
			motor[R] = 0;
			clearDrive();
		}
		if(goal == false || kickstand == true){
			gyroTurn(90);
			driveStraight(24.75);
			gyroTurn(90);
			driveStraight(24.5);
			gyroTurn(90);
			driveStraight(-26);
		}
		if(drag == true){
			gyroTurn(180);
			while(nMotorEncoder[L] > -sonarTicks){
				motor[L] = -80;
				motor[R] = -80;
			}
			motor[L] = 0;
			motor[R] = 0;
			clearDrive();
			servo[Hook] = 0;
			wait10Msec(100);
			while(nMotorEncoder[L] < sonarTicks){
				motor[L] = 80;
				motor[R] = 80;
			}
			motor[L] = 0;
			motor[R] = 0;
			clearDrive();
			gyroTurn(-45);
			driveStraight(102);
			gyroTurn(-135);
			driveStraight(-10);
			servo[Hook] = 120;
		}
	}
	if(startArea == false){
		if(goal == true){
			gyroTurn(-30);
			driveStraight(125);
			gyroTurn(30);
			SonarDrive(10);
			servo[ArmJoint] = 0;
			wait10Msec(150);
			if(drag == true){
				driveStraight(-10);
				gyroTurn(180);
				driveStraight(-10);
				servo[Hook] = 0;
				while(nMotorEncoder[L] < sonarTicks){
					motor[L] = 80;
					motor[R] = 80;
				}
				motor[L] = 0;
				motor[R] = 0;
				clearDrive();
				driveStraight(125);
				gyroTurn(-150);
			}
			if(kickstand == true){
				while(nMotorEncoder[L] > -sonarTicks){
					motor[L] = -80;
					motor[R] = -80;
				}
				motor[L] = 0;
				motor[R] = 0;
				clearDrive();
				gyroTurn(-30);
				driveStraight(-42);
				gyroTurn(-60);
				driveStraight(-33);
			}
		}
		if(goal == false){
			driveStraight(48);
			
		}
	}
	if(goal == false || kickstand == true){
		IRDrive(-5);
		if(IRDetection == false){
			driveStraight(-5);
			gyroTurn(-45);
			IRDrive(-10);
		}
		if(IRDetection == false){
			driveStraight(-5);
			gyroTurn(-45);
			IRDrive(-10);
		}
		if(IRDetection == true
			&& goal == false){
			StartTask(armProcessHigh);
			StartTask(raiseLinearSlide);
			gyroTurn(90);
			SonarDrive(10);
			servo[autoArm] = 0;
			wait10Msec(100);
			StartTask(lowerLinearSlide);
			if(kickstand == true){
				servo[autoArm] = 120;
				driveStraight(-10);
				gyroTurn(-90);
			}
		}
		if(kickstand == true){
			driveStraight(-13);
			gyroTurn(-90);
			driveFullPwr(-25);
		}
	}
}

#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTMotor,  HTServo)
#pragma config(Motor,  mtr_S1_C1_1,     L,             tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     R,             tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C2_1,     belt,          tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C2_2,     slide,         tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C3_1,     sweep,         tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C3_2,     none,          tmotorTetrix, openLoop)
#pragma config(Servo,  srvo_S1_C4_1,    release,              tServoStandard)
#pragma config(Servo,  srvo_S1_C4_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S1_C4_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C4_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C4_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C4_6,    servo6,               tServoNone)

void DriveOffRamp () {
	//Drives off the ramp
  motor[L] = motor[R] = 50;
	wait1Msec(3500);
	motor[L] = motor[R] = 0;
}

/** (+) = right
		(-) = left **/
void Turn (int degrees) {
	int d = sgn(degrees);
	motor[L] = d *  50;
	motor[R] = d * -50;
	wait1Msec(abs((int) (1010. * degrees / 90.)));
	motor[L] = motor[R] = 0;
}

void RaiseSlide () {
	//Raises the linear slide
	motor[slide] = -50;
	wait1Msec(1000);
	motor[slide] = 0;
}

task main()
{
	DriveOffRamp();
	Turn(180);
	RaiseSlide();
}

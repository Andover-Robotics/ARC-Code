#pragma config(Hubs,  S1, HTMotor,  HTServo,  HTMotor,     none)
#pragma config(Sensor, S2,     ColorSensor,    sensorI2CHiTechnicColor)
#pragma config(Sensor, S2,     IRSeeker,       sensorHiTechnicIRSeeker1200)
#pragma config(Motor,  mtr_S1_C1_1,     L,          tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     R,         tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C3_1,     LinearSlide,   tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C3_2,     ArmMotor,      tmotorTetrix, openLoop, encoder)
#pragma config(Servo,  srvo_S1_C2_1,    ArmExtend,            tServoContinuousRotation)
#pragma config(Servo,  srvo_S1_C2_2,    ArmJoint,             tServoStandard)
#pragma config(Servo,  srvo_S1_C2_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_4,    servo4,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_5,    servo5,               tServoNone)
#pragma config(Servo,  srvo_S1_C2_6,    servo6,               tServoNone)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*
FTC 2014-15
Cascade Effect
Team 4410 ARC Lightning
Autonomous Code 
Christopher Zhao
version .01, 10/21/2014
*/

#include "JoystickDriver.c"														//Needed for waitForStart
#include "hitechnic-colour-v2.h"											//Color Sensor Drivers, unsure if will be used

int rampLength;																				//Denotes Ramp Length in inches
float wheel = 6.5*PI;																	//Denotes Wheel Circumference in inches
int driveTicks = 1440/wheel;													//Denotes number of ticks needed to drive 1 inch
float circumference = 66 * PI;												//Denotes the outer circumference that the robot will drive along in in

void clearAll(){																			//Clears all encoders
	nMotorEncoder[L] = 0;																//Clears left motor
	nMotorEncoder[R] = 0;																//Clears right motor
	nMotorEncoder[LinearSlide] = 0;											//Clears linear slide motor
	nMotorEncoder[ArmMotor] = 0;												//Clears arm motor
}
void driveStraight(int in){														//Drives straight for desired inches (denoted by int in)
	while(nMotorEncoder[L] < 					
		driveTicks * in){																	//while the encoder is less than (ticks/in) * desired inches
		motor[L] = 80;																		//Left motor at 80 power
		motor[R] = 80;																		//Right motor at 80 power
	}
	clearAll();																					//clear all motors
	wait1Msec(500);																			//waits for half a second
}		
void turn(int deg){																		//turns the robot at a specified angle
	if(deg > 0){
		while(nMotorEncoder[R] <
			((deg/360)*(driveTicks*1.5*PI)){
			motor[R] = 65;
			motor[L] = -65;
		}
	}
	if(deg < 0){
		while(nMotorEncoder[R] >
			((deg/360)*(driveTicks*1.5*PI)){
				motor[R] = -65;
				motor[L] = 65;
	}
}
void circle(bool dir){																//Drives the robot in a circle or until it finds IR signal. 
																											//Direction (left (true) or right (false)) based on boolean dir
	if(dir == true){																		//If path should opt left
		while(nMotorEncoder[L] < 					
		(driveTicks*circumference) &&
			SensorValue[IRSensor] != 5){										//While the encoder hasn't circumnavigated the center goal and the IR Sensor hasn't detected anything
				int r = 0;																		//int r is the amount added to the power of the right motor to fix the ratio
				motor[L] = 88;																//sets the power of the left motor to 88
				motor[R] = 40 + r;														//sets the power of the right motor to 40 + r
				if(nMotorEncoder[L]/nMotorEncoder[R] < 2.2){
					r+=-1;
				}
				if(nMotorEncoder[L]/nMotorEncoder[R] > 2.2){
					r+=1;
				}
			}
	}
	if(dir == false){
		while(nMotorEncoder[R] < 
		(driveTicks*circumference) ||											//While the encoder hasn't circumnavigated the center goal and the IR Sensor hasn't detected anything
			SensorValue[IRSensor] != 5){
				int l = 0;																		//int l is the amount added to the power of the left motor to fix the ratio
				motor[L] = 40 + l;														//sets the power of the left motor to 40 + l
				motor[R] = 88;																//sets the power of the right motor to 88
				if(nMotorEncoder[R]/nMotorEncoder[L] < 2.2){
					r+=-1;
				}
				if(nMotorEncoder[R]/nMotorEncoder[L] > 2.2){
					r+=1;
				}
		}
	}
}

task main(){
	waitForStart();
	
}
